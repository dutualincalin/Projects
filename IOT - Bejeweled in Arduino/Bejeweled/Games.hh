#ifndef _STONES_H_
#define _STONES_H_

#define GRID_DIM 5
#define TIME_LIMIT 180000

#include <Adafruit_PCD8544.h>
#include "Leaderboard.hh"
#include "Sound.hh"
#include "Save.hh"
#include "Events.hh"
#include "Gems.hh"


// Variables
extern Adafruit_PCD8544 display;
extern int8_t option;
extern uint8_t state;
extern uint8_t oldState;
extern int score[6];
extern bool casual_save;
extern uint8_t casual_game_save[5][5];
extern unsigned long casual_time_save;
extern int casual_score_save;
extern bool puzzle_save;
extern uint8_t puzzle_game_save[5][5];
extern uint8_t puzzle_score_save;
extern uint8_t puzzle_level_save;


// Constant vectors and matrixes
static const unsigned char PROGMEM grid[] =
{
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B10000000, B00001000, B00000000, B10000000, B00001000, B00000000, B10000000, B00001000,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000,
};

static const unsigned char PROGMEM bejeweled_left_half[]=
{
B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,
B11111111,B11111111,B11111111,
B11111111,B11110000,B00000000,
B11111111,B11100000,B00000000,
B11111111,B11000000,B00000000,
B11111111,B10000000,B00000000,
B11111111,B00000000,B00000000,
B11111100,B00000000,B00000000,
B11111000,B00000000,B00000000,
B11110000,B00000000,B00000000,
B11111000,B00000000,B00000000,
B11111000,B00000000,B00000000,
B11111100,B00000000,B00000000,
B11111110,B00000000,B00000000,
B11111111,B00000000,B00000000,
B11111111,B00000000,B00000000,
B11111111,B10000000,B00000000,
B11111111,B11000000,B00000000,
B11111111,B11100000,B00000000,
B11101111,B11110000,B00000000,
B11110111,B11110000,B00000000,
B11111011,B11111000,B00000000,
B11111101,B11111100,B00000000,
B11111100,B11111110,B00000000,
B11111110,B01111111,B00000000,
B11111111,B00011111,B00000000,
B11111111,B10001111,B10000000,
B11111111,B11000111,B11000000,
B11111111,B11000000,B11100000,
B11111111,B11100000,B11110000,
B11111111,B11110000,B01110000,
B11111111,B11111000,B00111000,
B11111111,B11111100,B00011100,
B11111111,B11111110,B00001110,
B11111111,B11111110,B00000111,
B11111111,B11111111,B00000111,
B11111111,B11111111,B10000011,
B11111111,B11111111,B11000001,
B11111111,B11111111,B11100001,
B11111111,B11111111,B11110001,
B11111111,B11111111,B11110001,
B11111111,B11111111,B11111001,
B11111111,B11111111,B11111101,
B11111111,B11111111,B11111110,
B11111111,B11111111,B11111111,
};


static const unsigned char PROGMEM bejeweled_right_half[]=
{
B11111111,B11111111,B11111110,
B11111111,B11111111,B11111110,
B11111111,B11111111,B11111110,
B11111111,B11111111,B11111110,
B11111111,B11111111,B11111110,
B00000000,B00000111,B11111110,
B00000000,B00000011,B11111110,
B00000000,B00000001,B11111110,
B00000000,B00000000,B11111110,
B00000000,B00000000,B01111110,
B00000000,B00000000,B00111110,
B00000000,B00000000,B00011110,
B00000000,B00000000,B00001110,
B00000000,B00000000,B00001110,
B00000000,B00000000,B00011110,
B00000000,B00000000,B00111110,
B00000000,B00000000,B01111110,
B00000000,B00000000,B01111110,
B00000000,B00000000,B11111110,
B00000000,B00000001,B11111110,
B00000000,B00000011,B11111110,
B00000000,B00000111,B11111110,
B00000000,B00000111,B11110110,
B00000000,B00001111,B11101110,
B00000000,B00011111,B11011110,
B00000000,B00111111,B10111110,
B00000000,B01111111,B00111110,
B00000000,B01111110,B01111110,
B00000000,B11111000,B11111110,
B00000001,B11110001,B11111110,
B00000011,B11100011,B11111110,
B00000111,B00000111,B11111110,
B00001111,B00000111,B11111110,
B00001110,B00001111,B11111110,
B00011100,B00011111,B11111110,
B00111000,B00111111,B11111110,
B01110000,B01111111,B11111110,
B11100000,B11111111,B11111110,
B11100000,B11111111,B11111110,
B11000001,B11111111,B11111110,
B10000011,B11111111,B11111110,
B10000111,B11111111,B11111110,
B10001111,B11111111,B11111110,
B10001111,B11111111,B11111110,
B10011111,B11111111,B11111110,
B10111111,B11111111,B11111110,
B01111111,B11111111,B11111110,
B11111111,B11111111,B11111110,
};


static const unsigned char PROGMEM grid_line[]
{
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
};


static const unsigned char PROGMEM pos_u[]=
{
B11100000, B11100000,
B10000000, B00100000,
B10000000, B00100000,
B00000000, B00000000,
B00000000, B00000000,
B10000000, B00100000,
B10000000, B00100000,
B11100000, B11100000,
};


static const unsigned char PROGMEM pos_s[]=
{
B11111111, B11100000,
B10000000, B00100000,
B10000000, B00100000,
B10000000, B00100000,
B10000000, B00100000,
B10000000, B00100000,
B10000000, B00100000,
B11111111, B11100000,
};


static const uint8_t puzzle0[5][5] = 
{ 
    5, 5, 5, 5, 5,
    5, 5, 5, 5, 5,
    5, 4, 3, 2, 1,
    5, 3, 2, 1, 4,
    5, 4, 3, 2, 1,
};


static const uint8_t puzzle1[5][5] = 
{ 
    3, 3, 5, 3, 3,
    0, 1, 5, 1, 0,
    1, 0, 5, 0, 1,
    0, 1, 4, 1, 0,
    4, 4, 3, 4, 4,
};


static const uint8_t puzzle2[5][5] = 
{ 
    5, 5, 2, 5, 5,
    3, 5, 4, 2, 2,
    3, 0, 4, 0, 1,
    0, 3, 0, 1, 4,
    3, 0, 4, 0, 1,
};


static const uint8_t puzzle3[5][5] = 
{ 
    0, 0, 4, 0, 0,
    1, 1, 0, 1, 1,
    2, 2, 1, 2, 2,
    3, 3, 2, 3, 3,
    4, 4, 3, 4, 4,
};


static const uint8_t puzzle4[5][5] = 
{ 
    1, 0, 5, 0, 1,
    0, 1, 0, 1, 0,
    1, 0, 1, 0, 1,
    0, 1, 0, 1, 0,
    1, 0, 1, 0, 1,
};


// Functions
void showScore(unsigned int score);

void showLevel(uint8_t gems[][5], unsigned int score, uint8_t pos_x, uint8_t pos_y);

void showLevel(uint8_t gems[][5], unsigned int score, uint8_t pos_x, uint8_t pos_y, unsigned long timer);

void selectedMove(uint8_t gems[][5], uint8_t options, unsigned int *score, uint8_t *pos_x, uint8_t *pos_y);

void selectedMove(uint8_t gems[][5], uint8_t options, unsigned int *score, uint8_t *pos_x, uint8_t *pos_y, unsigned long timer);

void showSubOptions();

void SubMenu(uint8_t gems[][5], unsigned int score, unsigned long other);

void copyMatrix(uint8_t gems[][5], uint8_t level[][5]);

void Puzzle();

void Casual();

#endif
