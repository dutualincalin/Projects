Nume: Dutu Alin Calin
Grupa: 323 CD

	Tema 2 PC

Aceasta tema contine:
- server.c
- subscriber.c
- helpers.h
- README
- Makefile


In aceasta tema s-a lucrat cu fisierele: server.c, subscriber.c si helpers.h

1) Helpers.h: Aici au fost definite toate structurile folosite pentru crearea
serverului, dar si pentru definirea clinetilor. Acestea sunt structurile:

1. TCP_client - reprezentarea unui client TCP in program.
- id             => un string unic pentru fiecare client;
- socket         => numarul socket-ului prin care clientul s-a conectat;
- connected      => numar care arata starea conexiunii clientului;
			0 - deconectat, 1 - conectat
		
- offline_msg    => numar care arata daca s-au primit mesaje de la abonari cu
		     store-and-forward;
			0 - nu exista mesaje, 1 - exista mesaje
			
- buffer_offline => sir de caractere ce va retine mesajele abonatului cand e
		     offline;


2. Subscriber - folosit pentru a retine un client abonat la un topic.
- client => pointer catre structura TCP_client a abonatului;
- SF     => numar ce arata daca optiunea Store-and-Forward a fost activata.
			0 - dezactivata, 1 - activata
			
- next   => pointer catre urmatorul subscriber. Facut pentru a putea realiza
	    o lista de subscriberi pentru Topic-uri;
	

3. Topic - folosit pentru a retine un Topic la care clientii se pot abona.
- name        => string care va retine numele topic-ului;
- subscribers => pointer catre inceputul unei liste de abonati de tip Subscriber;
- next        => pointer catre urmatorul topic cu rol in realizarea listei
		 de topic-uri;
		 
		 
4. Client_List - folosit pentru realizarea listei de clienti.
- client => pointer catre structura TCP_client a unui client;
- next   => pointer catre urmatorul nod al listei;


5. TCP_sub_msg - folosita pentru crearea si distribuirea mesajelor date de clienti
serverului cu rol in abonarea/dezabonarea de la un topic.
- cmd        => string ce contine numele comenzii;
- topic_name => string ce contine numele topic-ului;
- SF         => Numar ce arata daca se doreste abonarea cu Store-and-Forward;
			0 - Nu, 1 - DA
			
			
6. TCP_msg - folosita pentru crearea si distribuirea mesajelor de la clientii UDP
primite de catre server sau a comenzilor date de server catre clientii TCP
- adress     => string ce contine adresa clientului UDP;
- port       => numar ce contine portul de conectare al clientului UDP;
- cmd        => numar ce reprezinta o comanda pentru client;
		0 - Afisare normala, 1 - exit, 2 - Afisare directa a mesajului
			
- type       => numar ce reprezinta tipul de date prelucrat;
		0 - INT; 1 - SHORT_REAL, 2 - FLOAT, 3 - STRING

- topic_name => string ce contine numele topic-ului;
- integer    => numar intreg ce va retine un numar daca tipul de data e "INT";
- real_num   => numar real ce va retine un numar de tip "SHORT_REAL" sau "FLOAT";
- text       => string ce va retine textul transmis;


7. UDP_msg - folosit pentru preluarea mesajului trimis de clientul UDP
- topic_name => string ce contine numele topic-ului;
- tip_date   => string care retine tipul de date prelucrat;
- data	     => string ce contine numarul sau textul dat;


Pe langa aceste structuri se mai gaseste si functia DIE care a fost preluata din
laboratoarele de Protocoale de Comunicatii plus o constanta ce defineste marimea
unui buffer.



2) server.c - Aici se gaseste programul implementat pentru functionarea serverului

Acesta are urmatoarele functii intermediare:
- new_client 		- creeaza un nou client
- add_client 		- adauga un client la lista de clienti
- get_client_by_id 	- cauta in lista de clienti clientul cu id-ul respectiv
- get_client_by_socket - cauta in lista de clienti clientul cu socket-ul respectiv
- add_subscriber	- adauga la lista de subscriberi de la un topic un nou abonat
- delete_subscriber	- sterge din lista de subscriberi de la un topic un abonat
- add_topic		- creeaza un nou topic si il adauga la lista de topicuri
- get_topic		- va returna adresa topic-ului respectiv din lista de topicuri


In functia main serveru la pornire va crea un nod de inceput pentru lista de clienti si
un nod de inceput pentru lista de topic-uri. In plus, se aloca static structuri pentru
mesajele TCP_msg, UDP_msg si TCP_sub_msg. Se creeaza socketul UDP pentru receptionarea
mesajelor UDP pe care se da bind si apoi se creeaza si socket-ul TCP pe care se va da
si bind si listen. Se adauga la lista de socketi, 0 pentru citirea de la tastatura urmate
de socketii UDP si TCP declarati anterior. 

Daca se citeste de la tastatura serverul va intra pe ramura cu i == 0. In cazul
in care se citeste exit se itereaza prin toti socketii clientilor conectati si 
ii deconecteaza de pe server, plus inchiderea programului respectivilor clienti.
La final se inchid socketii serverului si se inchide si programul serverului.

Daca un socket-ul udp primeste informatii serverul va merge pe ramura cu i == sockfd_udp
unde va prelua mesajul de la clientul UDP folosind o structura UPD_msg. Urmeaza crearea
mesajului TCP. Se muta topic_name si tipul de date, se convertesc datele in functie de caz
si se pun in mesaj si apoi se trimit la clientii abonati la topic daca sunt conectati.
Daca nu sunt conectati, dar totusi au activata optiunea Store-and-forward, atunci
mesajul va fi retinut intr-un buffer disponibil numai clientului respectiv.

Daca un socket tcp primeste informatii atunci se cere realizarea unei noi conexiuni.
Se efctueaza conexiunea si se primeste de la client id-ul sau. Se cauta clientul in
lista de clienti folosind id-ul dat si in cazul in care se gaseste un client se verifica
daca clientul respectiv este conectat. In acest caz este o coliziune de clienti si
se va inchide conexiunea cu clientul nou conectat, iar daca nu este conectat inseamna ca
respectivul client se reconecteaza, astfel se retin datele in structura TCP_client
si se verifica daca exista mesaje in buffer-ul clientului. Daca exista atunci acestea
vor transmise. Totusi in cazul in care nu se gaseste un client atunci acesta va
fi inregistrat in server.

In celelalte cazuri clientii vor trimite mesaje catre server. Se primesc mesaje
utilizand functia recv si in cazul in care nu se primeste niciun byte atunci
clientul s-a deconectat de la server ceea ce va duce la inchiderea conexiunii de la
server urmata de modificari in structura clientului deconectat. Altfel comenzile
date de client catre server pot fi doar de subscribe si unsubscribe. Daca se da
subscribe atunci se cauta topic-ul din cerere si se adauga clientul sub forma unei
structuri de tip Subscriber, altfel daca se cere unsubscribe structura abonamentului
pentru client va fi eliminata din lista topic-ului.



3) subscriber.c - Aici se gaseste programul implementat pentru client

Pentru subscriber se va crea un socket cu care se va efectua conexiunea la server
si se va conecta urmand ca mai apoi sa trimita id-ul sau catre server. Se adauga in
lista de socketi, 0 pentru stdin si sokcet-ul declarat petnru mesajele de la server.

Cand se citeste de la stdin inseamna fie abonare, fie inchiderea clientului. Daca se
da comanda exit atunci clientul va inchide socket-ul si programul se va opri. Daca
se da comanda de subscribe sau unsubscribe atunci se va umple structura de tip
TCP_sub_msg cu comanda, numele topic-ului si campul SF si se va trimite catre client.

Atfel se primeste mesaj de la server si poate fi de 3 feluri, fie o comanda de exit care
va inchide socket-ul si programul, fie o comanda care va scrie direct text-ul din
mesajul TCP, acesta fiind defapt buffer-ul clientului din server in care se retin
mesajele cu Store-and-Forward, fie se va scrie un mesaj normal in functie de tipul
de data modificat.


Observatii importante:
 1. Programarea defensiva a fost implementata prin verificarea fiecarui argument
 al comenzii la client si continuarea rularii la server
 
 2. API-ul protocolului peste TCP are structurile UDP_msg, TCP_msg si
 TCP_sub_msg fiecare folosit pentru un anumit tip de mesaje. Send-urile si
 receive-urile sunt acompaniate direct de while-uri care vor rula pana cand se
 vor trimite toate informatiile din structurile enuntate mai devreme (excluzand
 mesajele UDP). In while functiile send si receive vor returna numarul de bytes
 trimisi respectiv primiti si cu ajutorul while-ului vom apela functiile succesiv
 pana cand se trimite tot mesajul.
 
 3. Algortimul Neagle a fost dezzactivat pentru toti socketii din server si subscriber
 utilizand functia setsockopt.
 
 4. Testul quick_flow, ca sa fiu corect cu voi si cu mine, nu functioneaza cu
 30 de mesaje trimise rapid, in schimb am reusit o performanta de 25 de mesaje
 trimise in mod consecutiv. Functioneaza brici la 20 de mesaje in toate conditiile,
 dar la 25 de mesaje la primele rulari merge, dupa alte cateva rulari imediate incepe 
 sa dea kicks, insa daca mai las in pace portu va da succes din nou. Nu sunt sigur
 de ce spun, dar s-ar putea ca acest lucru sa fie din cauza masinii mele virtuale
 care are doar doua core-uri de I7, ceea ce ingreuneaza functionarea programelor
 in timpi utili (am patit la PA).
 
 5. Daca testul quick_flow nu merge, nici testul exit nu merge, desi la o rulare
 manuala pare sa mearga foarte bine. Da o eroare de tip BrokenPipe. Cel mai
 probabil pentru ca apar si celelate printf-uri de la quick_flow.
 
 6. O buna parte din program a fost preluata din laboratoarele de Protocoale de
 comunicatii. 
 
 Link OCW: https://ocw.cs.pub.ro/courses/pc
 Link Moodle: https://curs.upb.ro/course/view.php?id=11651
