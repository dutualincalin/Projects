Nume: Dutu Alin Calin
Grupa: 323CD


	Tema 3 PC
	
Aceasta tema contine:
1. Fisierele din laboratorul 10 de Protocoale de Comunicatii
- buffer.c
- buffer.h
- helpers.c
- helpers.h
- request.c (varianta modificata)
- request.h (varianta modificata)

2. Fisiere din biblioteca open-source Parson
- parson.c
- parson.h

3. Alte fisiere
- client.c
- Makefile
- README


Pentru aceasta tema s-a lucrat in fisierele client.c, request.c si request.h.

1) Request.c si Request.h

   Fisierele au fost preluat din laboratorul 10 de PC. Modificarile pe care
le-am adus au fost legate de procesarea header-elor si cookie-urilor pentru ca 
in toate cazurile prevazuite de tema s-a lucrat doar cu un header de authorization
si cu un cookie de login, deci nu mai era nevoie de o iteratie de for pentru functiile
de POST si GET. In aceste conditii s-au inlocuit cateva for-uri cu simple sprintf-uri.
Mai mult, s-a adaugat o noua functie care proceseaza request-urile de tip DELETE
care este asemanatoare cu functia pentru POST deoarece se adauga la mesaj in
acelasi mod URL-ul, Host-ul si headerele necesare plus o linie goala.
   In request.h se gasesc semnaturile functiilor, iar in request.c implementarile
acestora.


2) Client.c

   Aici se desfasoara toata magia temei. Pentru inceput se declara toate variabilele
necesare si se creeaza host-ul prin alipirea IP-ului serverului cu portul si apoi incepe
citirea de la tastatura care va fi activa pana la executarea comenzii "exit" care
va inchide programul. In aceasta faza se pot introduce comenzi care vor crea cererile
HTTP ce vor fi trimise catre server. Acestea sunt:
-    register   -> se introduce comanda "register" si se introduc username-ul si parola,
	     se creeaza un obiect JSON, cu ajutorul bibliotecii Parson, continand
	     datele citite si se va face o cerere de POST care va fi trimisa catre
	     server. Raspunsul serverului va consta fie intr-un mesaj eroare, fie
	     intr-un mesaj de succes.

-     login     -> acelasi lucru ca la register doar ca in caz de succes se va retine
	     cookie-ul de sesiune, iar in caz de eroare nu se va retine nimic.
	     
- enter_library -> se proceseaza o cerere de GET care va avea cookie-ul de sesiune.
		Raspunsul serverului poate fi o eroare, caz in care se afiseaza eroarea
		si se trece la urmatoarea comanda sau succes caz in care se retine un
		token JWT dat de server pentru autorizatie si afisarea unui mesaj
		de succes.
		
-   get_books   -> se proceseaza o cerere de GET care va avea token-ul de autorizatie
		pe post de header. Raspunsul serverului poate fi o eroare, caz
		in care se afiseaza eroarea si se va trece la urmatoarea comanda
		sau succes caz in care se va afisa o lista de carti in format JSON.
		
-    get_book   -> In cazul in care nu exista token de autorizatie se va afisa eroare
		si se va trece la urmatoarea comanda. Se va citi id-ul cartii dorite si
		se va procesa o cerere de GET care va avea token-ul de autorizatie pe
		post de header. Raspunsul serverului poate fi o eroare, caz in care se
		va afisa eroarea si se va trece la urmatoarea comanda sau succes caz
		in care se va afisa un obiect JSON care contine detaliile cartii cu
		id-ul introdus.
		
-    add_book   -> In cazul in care nu exista token de autorizatie se va afisa eroare
		si se va trece la urmatoarea comanda. Se vor citi de la tastatura titlul,
		autorul, genul, publicatorul si numarul de pagini al cartii de adaugat,
		se va crea un obiect JSON cu toate datele citite, se va face si un nou
		request de tip post cu token-ul JWT si obiectul JSON nou creat care
		urmeaza a fi trimisa catre server. Raspunsul serverului poate fi o eroare,
		caz in care se afiseaza eroarea si se trece la urmatoarea comanda sau
		succes caz in care se va afisa un mesaj de succes.
		
-  delete_book  -> In cazul in care nu exista token de autorizatie se va afisa eroare
		si se va trece la urmatoarea comanda. Se va citi id-ul cartii dorite si
		se va procesa o cerere de DELETE care va avea token-ul de autorizatie pe
		post de header. Raspunsul serverului poate fi o eroare, caz in care se
		va afisa eroarea si se va trece la urmatoarea comanda sau succes caz
		in care se va afisa un mesaj de succes.
		
-    logout     -> Pentru logout se trimite o cerere de tip GET cu cookie-ul de conectare,
		care va trimisa catre server si se verifica raspunsul serverului. La eroare
		se va afisa doar un mesaj de eroare si trece mai departe, iar la succes se
		golesc vectorii care retin cookie-ul de sesiune si tokenul JWT si se afiseaza
		mesajul de succes.
		
   Pentru executarea simultana a mai multor comenzi, in momentul in care o comanda este
finalizata, indiferent de output, socket-ul clientului va fi mereu inchis si apoi redeschis
pentru urmatoarea comanda. Exista si o exceptie pentru comanda exit in care nu mai este
necesara redeschiderea socket-ului.

   Deoarece s-a lucrat in C, am folosit biblioteca Parson cu scopul de a putea crea mai usor
obiectele JSON pentru request-uri. Pentru reply-uri nu am parsat raspunsurile in vreun fel
deoarece arata foarte bine, dupa parerea mea asa cum sunt raspunsurile.
   Pentru crearea obiectelor JSON s-au folosit urmatoarele functii din biblioteca Parson:
	- json_value_init_object - initializeaza un obiect JSON;
	- json_value_get_object - returneaza valoarea obiectului JSON;
	- json_object_set_string - seteaza o perechere "tip" - String in obiectul JSON;
	- json_object_set_number - seteaza o pereche "tip" - Number in obiectul JSON;
	- json_serialize_to_string_pretty - returneaza obiectul JSON sub forma de string;
	- json_free_serialized_string - elibereaza memoria string-ului serializat al obiectului JSON;
	- json_value_free - elibereaza memoria obiectului JSON;


BIBLIOGRAFIE

1) Echipa PCom UPB. Laboratorul 10 PCom. Link: https://ocw.cs.pub.ro/courses/pc/laboratoare/10
	(Accesat la data de 22 mai 2021)

2)  Github users: disconnec3d, kgabis. Biblioteca Parson. Link: https://github.com/kgabis/parson
	(Accesat la data de 22 mai 2021)
